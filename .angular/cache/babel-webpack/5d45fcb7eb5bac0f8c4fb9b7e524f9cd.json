{"ast":null,"code":"import _asyncToGenerator from \"/home/cloudtraining/Desktop/ngShopDay6/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { of } from 'rxjs';\nimport { CartService } from '../cart.service';\nimport { CartViewComponent } from './cart-view.component';\nfdescribe('CartViewComponent', () => {\n  let component;\n  let fixture;\n  let mockCartService;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    mockCartService = jasmine.createSpyObj('CartService', ['removeItemFromCart'], ['cart$']);\n    yield TestBed.configureTestingModule({\n      declarations: [CartViewComponent],\n      providers: [{\n        provide: CartService,\n        useValue: mockCartService\n      }],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    const mockCart = {\n      numberOfCartItems: 2,\n      cartTotal: 100.01,\n      items: [{\n        itemName: 'mock-name-1',\n        itemCost: 100,\n        itemDesc: 'mock-desc-1',\n        cartUuid: 'mock-uuid-1'\n      }, {\n        itemName: 'mock-name-2',\n        itemCost: .01,\n        itemDesc: 'mock-desc-2',\n        cartUuid: 'mock-uuid-2'\n      }]\n    };\n    const mockCartObservable = of(mockCart); //@ts-ignore\n\n    Object.getOwnPropertyDescriptor(mockCartService, 'cart$').get.and.returnValue(mockCartObservable);\n    fixture = TestBed.createComponent(CartViewComponent);\n    component = fixture.componentInstance;\n  });\n  it('should create', () => {\n    fixture.detectChanges();\n    expect(component).toBeTruthy();\n  });\n  it('should display our cart items', () => {\n    fixture.detectChanges();\n    const listItems = fixture.nativeElement.querySelectorAll('mat-list-item');\n    expect(listItems.length).toEqual(2);\n    let el = listItems[0].querySelector('.sub-line');\n    expect(el === null || el === void 0 ? void 0 : el.textContent).toContain('$100.00');\n    el = listItems[1].querySelector('.sub-line');\n    expect(el === null || el === void 0 ? void 0 : el.textContent).toContain('$0.01');\n    el = listItems[0].querySelector('div[mat-line]');\n    expect(el === null || el === void 0 ? void 0 : el.textContent).toContain('mock-name-1');\n    el = listItems[1].querySelector('div[mat-line]');\n    expect(el === null || el === void 0 ? void 0 : el.textContent).toContain('mock-name-2');\n    expect(fixture.nativeElement.querySelector('h2').textContent).toContain('2');\n    expect(fixture.nativeElement.querySelector('h3').textContent).toContain('$100.01');\n  });\n});","map":{"version":3,"sources":["/home/cloudtraining/Desktop/ngShopDay6/src/cart/cart-view/cart-view.component.spec.ts"],"names":["CUSTOM_ELEMENTS_SCHEMA","TestBed","of","CartService","CartViewComponent","fdescribe","component","fixture","mockCartService","beforeEach","jasmine","createSpyObj","configureTestingModule","declarations","providers","provide","useValue","schemas","compileComponents","mockCart","numberOfCartItems","cartTotal","items","itemName","itemCost","itemDesc","cartUuid","mockCartObservable","Object","getOwnPropertyDescriptor","get","and","returnValue","createComponent","componentInstance","it","detectChanges","expect","toBeTruthy","listItems","nativeElement","querySelectorAll","length","toEqual","el","querySelector","textContent","toContain"],"mappings":"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","sourcesContent":["import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { of } from 'rxjs';\nimport { CartService } from '../cart.service';\nimport { CartViewComponent } from './cart-view.component';\nfdescribe('CartViewComponent', () => {\n    let component;\n    let fixture;\n    let mockCartService;\n    beforeEach(async () => {\n        mockCartService = jasmine.createSpyObj('CartService', ['removeItemFromCart'], ['cart$']);\n        await TestBed.configureTestingModule({\n            declarations: [CartViewComponent],\n            providers: [\n                { provide: CartService, useValue: mockCartService }\n            ],\n            schemas: [CUSTOM_ELEMENTS_SCHEMA]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        const mockCart = {\n            numberOfCartItems: 2,\n            cartTotal: 100.01,\n            items: [\n                {\n                    itemName: 'mock-name-1',\n                    itemCost: 100,\n                    itemDesc: 'mock-desc-1',\n                    cartUuid: 'mock-uuid-1'\n                },\n                {\n                    itemName: 'mock-name-2',\n                    itemCost: .01,\n                    itemDesc: 'mock-desc-2',\n                    cartUuid: 'mock-uuid-2'\n                }\n            ]\n        };\n        const mockCartObservable = of(mockCart);\n        //@ts-ignore\n        Object.getOwnPropertyDescriptor(mockCartService, 'cart$').get.and.returnValue(mockCartObservable);\n        fixture = TestBed.createComponent(CartViewComponent);\n        component = fixture.componentInstance;\n    });\n    it('should create', () => {\n        fixture.detectChanges();\n        expect(component).toBeTruthy();\n    });\n    it('should display our cart items', () => {\n        fixture.detectChanges();\n        const listItems = fixture.nativeElement.querySelectorAll('mat-list-item');\n        expect(listItems.length).toEqual(2);\n        let el = listItems[0].querySelector('.sub-line');\n        expect(el === null || el === void 0 ? void 0 : el.textContent).toContain('$100.00');\n        el = listItems[1].querySelector('.sub-line');\n        expect(el === null || el === void 0 ? void 0 : el.textContent).toContain('$0.01');\n        el = listItems[0].querySelector('div[mat-line]');\n        expect(el === null || el === void 0 ? void 0 : el.textContent).toContain('mock-name-1');\n        el = listItems[1].querySelector('div[mat-line]');\n        expect(el === null || el === void 0 ? void 0 : el.textContent).toContain('mock-name-2');\n        expect(fixture.nativeElement.querySelector('h2').textContent).toContain('2');\n        expect(fixture.nativeElement.querySelector('h3').textContent).toContain('$100.01');\n    });\n});\n"]},"metadata":{},"sourceType":"module"}